const { Telegraf } = require('telegraf');
require('dotenv').config();
const INTENSIVE = process.env.INTENSIVE;
const CONSULTATION_LINK = process.env.CONSULTATION_LINK;
const EMAIL = process.env.EMAIL;
const BOT_TOKEN = process.env.BOT_TOKEN || '8358954175:AAHRYiUsP8FiQIE4lEoxIHVLxMqmjURHWig';
const CHANNEL_USERNAME = process.env.CHANNEL_USERNAME || '@your_channel';
const CHANNEL_CHAT_ID = process.env.CHANNEL_CHAT_ID; 
const CHANNEL_LINK = process.env.CHANNEL_LINK;
const bot = new Telegraf(BOT_TOKEN);
const newUsers = new Set();


async function checkSubscription(userId) {
    try {
        if (!CHANNEL_CHAT_ID) {
            console.error('CHANNEL_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω');
            return true; 
        }

        const member = await bot.telegram.getChatMember(CHANNEL_CHAT_ID, userId);
        const allowedStatuses = ['member', 'administrator', 'creator'];
        return allowedStatuses.includes(member.status);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
        
        if (error.response && error.response.error_code === 400) {
            console.error('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHANNEL_CHAT_ID:', CHANNEL_CHAT_ID);
        } else if (error.response && error.response.error_code === 403) {
            console.error('–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É');
        }
        
        return false;
    }
}

async function subscriptionMiddleware(ctx, next) {
   if (ctx.message 
    && ctx.message.text 
    && (ctx.message.text.startsWith('/towrite') 
        || ctx.message.text.startsWith('/getaconsultation')
        || ctx.message.text.startsWith('/importantinformation')
        || ctx.message.text.startsWith('/intensive'))){
            console.log('ewqeqw')

    return next();
    }

    if (!CHANNEL_CHAT_ID) {
        console.warn('CHANNEL_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞');
        return next();
    }

    const userId = ctx.from.id;
    
    if (newUsers.has(userId)) {
        return next();
    }

    const isSubscribed = await checkSubscription(userId);

    if (!isSubscribed) {
        const username = ctx.from.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        await ctx.reply(
            `üì¢ –ü—Ä–∏–≤–µ—Ç @${username}! –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}\n\n` +
            `–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üì∫ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª',
                                url: `https://t.me/${CHANNEL_LINK.replace('@', '')}`
                            }
                        ],
                        [
                            {
                                text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                callback_data: 'check_subscription'
                            }
                        ]
                    ]
                }
            }
        );
        return;
    }
    
    return next();
}
bot.use(subscriptionMiddleware);

bot.on('message', async (ctx, next) => {
    if (ctx.message.text && ctx.message.text.startsWith('/')) {
        return next();
    }

    const userId = ctx.from.id;
    
    if (!newUsers.has(userId)) {
        newUsers.add(userId); 
        
        if (!CHANNEL_CHAT_ID) {
            await ctx.reply(
                '‚ö†Ô∏è –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. CHANNEL_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω.'
            );
            return;
        }
        
        const username = ctx.from.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const isSubscribed = await checkSubscription(userId);
        
        if (isSubscribed) {
            await ctx.reply('‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω! –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é —Ñ–∞–π–ª...');
            try {
                await ctx.replyWithDocument({
                    source: './storage/file.pdf',
                    filename: '–ü–æ–¥–∞—Ä–æ–∫.pdf'
                }, {
                    caption: 'üéÅ –í–æ—Ç –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –°–ø–∞—Å–∏–±–æ!'
                });
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error.message);
                await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.');
            }
        } else {
            await ctx.reply(
                `üòÉ –û–≥–æ! –ö—Ç–æ —É –Ω–∞—Å —Ç—É—Ç?\n@${username}, –∞ —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —É –Ω–∞—Å —Ç—É—Ç —Ä–∞–∑–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–æ–≤?\n–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª –º—ã –¥–∞—Ä–∏–º –ø–æ–¥–∞—Ä–æ–∫!\n–°–∫–æ—Ä–µ–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É:\n`,
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
                                    url: `https://t.me/${CHANNEL_LINK.replace('@', '')}`
                                }
                            ],
                            [
                                {
                                    text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                    callback_data: 'check_subscription'
                                }
                            ]
                        ]
                    }
                }
            );
        }
        return; 
    }
    
    return next();
});

bot.start(async (ctx) => {
    const userId = ctx.from.id;

    if (!newUsers.has(userId)) {
        newUsers.add(userId);
    }
    
    if (!CHANNEL_CHAT_ID) {
        await ctx.reply(
            '‚ö†Ô∏è –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. CHANNEL_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω.'
        );
        return;
    }
    
    const username = ctx.from.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const isSubscribed = await checkSubscription(userId);
    
    if (isSubscribed) {
        await ctx.reply('‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω! –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–¥–∞—Ä–æ–∫...');
        try {
            await ctx.replyWithDocument({
                source: './storage/file.pdf',
                filename: '–ü–æ–¥–∞—Ä–æ–∫.pdf'
            }, {
                caption: 'üéÅ –í–æ—Ç –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –°–ø–∞—Å–∏–±–æ!'
            });
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error.message);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.');
        }
    } else {
        await ctx.reply(
            `üòÉ –û–≥–æ! –ö—Ç–æ —É –Ω–∞—Å —Ç—É—Ç?\n@${username}, –∞ —Ç—ã –∑–Ω–∞–µ—à—å, —á—Ç–æ —É –Ω–∞—Å —Ç—É—Ç —Ä–∞–∑–¥–∞—á–∞ –ø–æ–¥–∞—Ä–∫–æ–≤?\n–ó–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –Ω–∞—à Telegram-–∫–∞–Ω–∞–ª –º—ã –¥–∞—Ä–∏–º –ø–æ–¥–∞—Ä–æ–∫!\n–°–∫–æ—Ä–µ–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –∏ –∂–º–∏ –∫–Ω–æ–ø–∫—É:\n`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
                                url: `https://t.me/${CHANNEL_LINK.replace('@', '')}`
                            }
                        ],
                        [
                            {
                                text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                callback_data: 'check_subscription'
                            }
                        ]
                    ]
                }
            }
        );
    }
});

bot.action('check_subscription', async (ctx) => {
    await ctx.answerCbQuery();
    
    const userId = ctx.from.id;
    const isSubscribed = await checkSubscription(userId);

    if (isSubscribed) {
        if (ctx.callbackQuery.message) {
            await ctx.editMessageText('‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω! –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é —Ñ–∞–π–ª...');
        } else {
            await ctx.reply('‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω! –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é —Ñ–∞–π–ª...');
        }
        
        try {
            await ctx.replyWithDocument({
                source: './storage/file.pdf',
                filename: '–ü–æ–¥–∞—Ä–æ–∫.pdf'
            }, {
                caption: 'üéÅ –í–æ—Ç –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –°–ø–∞—Å–∏–±–æ!'
            });
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error.message);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.');
        }
    } else {
        if (ctx.callbackQuery.message) {
            await ctx.editMessageText(
                '‚ùå –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—å —Å–Ω–æ–≤–∞.',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
                                    url: `https://t.me/${CHANNEL_LINK.replace('@', '')}`
                                }
                            ],
                            [
                                {
                                    text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                    callback_data: 'check_subscription'
                                }
                            ]
                        ]
                    }
                }
            );
        } else {
            await ctx.reply(
                '‚ùå –¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—å —Å–Ω–æ–≤–∞.',
                {
                    reply_markup: {
                        inline_keyboard: [
                            [
                                {
                                    text: 'üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
                                    url: `https://t.me/${CHANNEL_LINK.replace('@', '')}`
                                }
                            ],
                            [
                                {
                                    text: 'üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                    callback_data: 'check_subscription'
                                }
                            ]
                        ]
                    }
                }
            );
        }
    }
});

bot.command('towrite', async (ctx) => {

    
    if (EMAIL) {
        await ctx.reply(EMAIL);
    } else {
        await ctx.reply('‚ùå Email –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
    }
});
bot.command('getaconsultation', async (ctx) => {
    if (CONSULTATION_LINK) {
        await ctx.reply(
            `–°—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: ${CONSULTATION_LINK}`
        );
    } else {
        await ctx.reply('–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç');
    }

});
bot.command('intensive',async (ctx) => {
    if (INTENSIVE) {
        await ctx.reply(
            `–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Å–∏–≤—ã: ${INTENSIVE}`
        );
    } else
        await ctx.reply('–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç');
})

bot.command('importantinformation', async (ctx) => {
     await ctx.reply(`(FAQ) https://t.me/prostaya_psychologya/78`);
});

bot.command('getagift', async (ctx) => {
    const userId = ctx.from.id;
    
    if (!CHANNEL_CHAT_ID) {
        await ctx.reply('‚ö†Ô∏è –ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. CHANNEL_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω.');
        return;
    }
    
    const isSubscribed = await checkSubscription(userId);
    
    if (isSubscribed) {
        await ctx.reply('‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω! –°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—é –ø–æ–¥–∞—Ä–æ–∫...');
        try {
            await ctx.replyWithDocument({
                source: './storage/file.pdf',
                filename: '–ü–æ–¥–∞—Ä–æ–∫.pdf'
            }, {
                caption: 'üéÅ –í–æ—Ç –≤–∞—à –ø–æ–¥–∞—Ä–æ–∫ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –°–ø–∞—Å–∏–±–æ!'
            });
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error.message);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.');
        }
    } else {
        const username = ctx.from.username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        await ctx.reply(
            `‚ùå @${username}, –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}\n\n` +
            `–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏:`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: 'üì∫ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
                                url: `https://t.me/${CHANNEL_LINK.replace('@', '')}`
                            }
                        ],
                        [
                            {
                                text: '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
                                callback_data: 'check_subscription'
                            }
                        ]
                    ]
                }
            }
        );
    }
});


bot.launch().then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    
    if (!CHANNEL_CHAT_ID) {
        console.warn('‚ö†Ô∏è CHANNEL_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
    } else {
        console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞: ${CHANNEL_CHAT_ID}`);
    }
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));